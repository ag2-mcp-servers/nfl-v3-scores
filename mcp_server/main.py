# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:44:07+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    FieldFormatAllTeamsGetResponse,
    FieldFormatByesSeasonGetResponse,
    FieldFormatDepthChartsGetResponse,
    FieldFormatFreeAgentsGetResponse,
    FieldFormatGameStatsByWeekSeasonWeekGetResponse,
    FieldFormatGameStatsSeasonGetResponse,
    FieldFormatNewsByDateDateGetResponse,
    FieldFormatNewsByPlayerIDPlayeridGetResponse,
    FieldFormatNewsByTeamTeamGetResponse,
    FieldFormatNewsGetResponse,
    FieldFormatPlayersGetResponse,
    FieldFormatPlayersTeamGetResponse,
    FieldFormatRefereesGetResponse,
    FieldFormatRookiesSeasonGetResponse,
    FieldFormatSchedulesSeasonGetResponse,
    FieldFormatScoresByDateDateGetResponse,
    FieldFormatScoresByWeekSeasonWeekGetResponse,
    FieldFormatScoresSeasonGetResponse,
    FieldFormatSimulatedScoresNumberofplaysGetResponse,
    FieldFormatStadiumsGetResponse,
    FieldFormatStandingsSeasonGetResponse,
    FieldFormatTeamGameStatsBySeasonSeasonTeamidNumberofgamesGetResponse,
    FieldFormatTeamGameStatsSeasonWeekGetResponse,
    FieldFormatTeamSeasonStatsSeasonGetResponse,
    FieldFormatTeamsGetResponse,
    FieldFormatTeamsSeasonGetResponse,
    FieldFormatTimeframesTypeGetResponse,
    Format,
    PlayerDetail,
    Type,
)

app = MCPProxy(
    contact={'x-twitter': 'nfldata'},
    description='NFL schedules, scores, odds, weather, and news API.',
    title='NFL v3 Scores',
    version='1.0',
    servers=[
        {'url': 'http://azure-api.sportsdata.io/v3/nfl/scores'},
        {'url': 'https://azure-api.sportsdata.io/v3/nfl/scores'},
    ],
)


@app.get(
    '/{format}/AllTeams',
    description=""" Gets all teams, including pro bowl teams. """,
    tags=['team_management', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams_all(format: Format = 'XML'):
    """
    Teams (All)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/AreAnyGamesInProgress',
    description=""" Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none. """,
    tags=['game_statistics', 'game_schedule_and_scores'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def are_games_in_progress(format: Format = 'XML'):
    """
    Are Games In Progress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Byes/{season}',
    description=""" Get bye weeks for the teams during a specified NFL season.  """,
    tags=['season_and_week_tracking', 'game_schedule_and_scores'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def bye_weeks(format: Format = 'XML', season: str = ...):
    """
    Bye Weeks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/CurrentSeason',
    description=""" Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. """,
    tags=['season_and_week_tracking', 'time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def season_current(format: Format = 'XML'):
    """
    Season Current
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/CurrentWeek',
    description=""" Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET. """,
    tags=['season_and_week_tracking', 'time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def week_current(format: Format = 'XML'):
    """
    Week Current
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/DepthCharts',
    description=""" Depth charts for all NFL teams split by offensive, defensive, and special teams position groupings. """,
    tags=['depth_chart_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def depth_charts(format: Format):
    """
    Depth Charts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/FreeAgents',
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_free_agents(format: Format = 'XML'):
    """
    Player Details by Free Agents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/GameStats/{season}',
    tags=['game_statistics', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def game_stats_by_season_deprecated_use_team_game_stats_instead(
    format: Format = 'XML', season: str = ...
):
    """
    Game Stats by Season (Deprecated, use Team Game Stats instead)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/GameStatsByWeek/{season}/{week}',
    tags=['game_statistics', 'season_and_week_tracking', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def game_stats_by_week_deprecated_use_team_game_stats_instead(
    format: Format = 'XML', season: str = ..., week: str = ...
):
    """
    Game Stats by Week (Deprecated, use Team Game Stats instead)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/LastCompletedSeason',
    description=""" Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. """,
    tags=['season_and_week_tracking'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def season_last_completed(format: Format = 'XML'):
    """
    Season Last Completed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/LastCompletedWeek',
    description=""" Number of the last completed week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET. """,
    tags=['season_and_week_tracking', 'time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def week_last_completed(format: Format = 'XML'):
    """
    Week Last Completed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/News',
    tags=['news_updates_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news(format: Format = 'XML'):
    """
    News
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/NewsByDate/{date}',
    tags=['news_updates_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news_by_date(format: Format = 'XML', date: str = ...):
    """
    News by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/NewsByPlayerID/{playerid}',
    tags=['news_updates_retrieval', 'player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news_by_player(format: Format = 'XML', playerid: str = ...):
    """
    News by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/NewsByTeam/{team}',
    tags=['news_updates_retrieval', 'team_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news_by_team(format: Format = 'XML', team: str = ...):
    """
    News by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Ping/{seconds}',
    description=""" Ping NFL API """,
    tags=['time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def x_ping(format: Format = 'XML', seconds: str = ...):
    """
    X Ping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Player/{playerid}',
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_player(format: Format = 'XML', playerid: str = ...):
    """
    Player Details by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players',
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_available(format: Format = 'XML'):
    """
    Player Details by Available
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players/{team}',
    tags=['player_information', 'team_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_team(format: Format = 'XML', team: str = ...):
    """
    Player Details by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Referees',
    description=""" Returns full list of NFL Referees """,
    tags=[
        'team_management',
        'player_information',
        'game_statistics',
        'season_and_week_tracking',
    ],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def referees(format: Format = 'XML'):
    """
    Referees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Rookies/{season}',
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_rookie_draft_year(format: Format = 'XML', season: str = ...):
    """
    Player Details by Rookie Draft Year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Schedules/{season}',
    description=""" Game schedule for a specified season. """,
    tags=['game_schedule_and_scores', 'season_and_week_tracking'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def schedule(format: Format = 'XML', season: str = ...):
    """
    Schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Scores/{season}',
    description=""" Game scores for a specified season. """,
    tags=['game_statistics', 'season_and_week_tracking', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def scores_by_season(format: Format = 'XML', season: str = ...):
    """
    Scores by Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/ScoresByDate/{date}',
    description=""" Get game scores for a specified week of a season. """,
    tags=['game_statistics', 'game_schedule_and_scores'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def scores_by_date(format: Format = 'XML', date: str = ...):
    """
    Scores by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/ScoresByWeek/{season}/{week}',
    description=""" Get game scores for a specified week of a season. """,
    tags=['game_statistics', 'season_and_week_tracking', 'game_schedule_and_scores'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def scores_by_week(format: Format = 'XML', season: str = ..., week: str = ...):
    """
    Scores by Week
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/SimulatedScores/{numberofplays}',
    description=""" Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018. """,
    tags=['game_statistics', 'season_and_week_tracking', 'game_schedule_and_scores'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def scores_by_week_simulation(format: Format = 'XML', numberofplays: str = ...):
    """
    Scores by Week Simulation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Stadiums',
    description=""" This method returns all stadiums. """,
    tags=['team_management', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def stadiums(format: Format = 'XML'):
    """
    Stadiums
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Standings/{season}',
    tags=['team_management', 'season_and_week_tracking', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def standings(format: Format = 'XML', season: str = ...):
    """
    Standings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStats/{season}/{week}',
    tags=[
        'team_management',
        'game_statistics',
        'team_performance_statistics',
        'season_and_week_tracking',
    ],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_stats(format: Format = 'XML', season: str = ..., week: str = ...):
    """
    Team Game Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}',
    description=""" Game by game log of total team statistics. """,
    tags=['team_management', 'game_statistics', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_logs_by_season(
    format: Format = 'XML',
    season: str = ...,
    teamid: str = ...,
    numberofgames: str = ...,
):
    """
    Team Game Logs By Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamSeasonStats/{season}',
    tags=['team_management', 'team_performance_statistics', 'season_and_week_tracking'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_season_stats(format: Format = 'XML', season: str = ...):
    """
    Team Season Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Teams',
    description=""" Gets all active teams. """,
    tags=['team_management', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams_active(format: Format = 'XML'):
    """
    Teams (Active)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Teams/{season}',
    description=""" List of teams playing in a specified season. """,
    tags=['team_management', 'season_and_week_tracking', 'team_performance_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams_by_season(format: Format = 'XML', season: str = ...):
    """
    Teams by Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Timeframes/{type}',
    description=""" Get detailed information about past, present, and future timeframes. """,
    tags=['time_sensitive_data_management', 'season_and_week_tracking'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def timeframes(format: Format = 'XML', type: Type = 'current'):
    """
    Timeframes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/UpcomingSeason',
    description=""" Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. """,
    tags=['season_and_week_tracking', 'time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def season_upcoming(format: Format = 'XML'):
    """
    Season Upcoming
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/UpcomingWeek',
    description=""" Number of the upcoming week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET. """,
    tags=['season_and_week_tracking', 'time_sensitive_data_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def week_upcoming(format: Format = 'XML'):
    """
    Week Upcoming
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
